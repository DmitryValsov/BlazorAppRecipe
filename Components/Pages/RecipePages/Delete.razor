@page "/recipes/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorWebAppRecipe.Models
@inject IDbContextFactory<BlazorAppRecipe.Data.BlazorAppRecipeContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Recipe</h2>
    <hr />
    @if (recipe is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@recipe.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ReleaseDate</dt>
            <dd class="col-sm-10">@recipe.ReleaseDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Ingredients</dt>
            <dd class="col-sm-10">@recipe.Ingredients</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@recipe.Price</dd>
        </dl>
        <EditForm method="post" Model="recipe" OnValidSubmit="DeleteRecipe" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(recipe is null)">Delete</button> |
            <a href="/recipes">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Recipe? recipe;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        recipe = await context.Recipe.FirstOrDefaultAsync(m => m.Id == Id);

        if (recipe is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteRecipe()
    {
        using var context = DbFactory.CreateDbContext();
        context.Recipe.Remove(recipe!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/recipes");
    }
}
